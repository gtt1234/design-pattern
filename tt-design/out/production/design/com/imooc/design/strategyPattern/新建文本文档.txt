策略模式：http://www.imooc.com/article/11475

 * 设计原则1：找出应用中可能需要变化之处，把它们独立起来，(在这里就是那些行为类)不要和那些不需要变化的代码混在一起
 * 设计原则2：针对接口编程，而不是针对实现编程
 * 设计原则3：多用组合，少用继承

 将可能需要变化之处独立出来，抽象成接口，用不同的行为类实现它，
 在抽象类里订单行为接口，当需要这些行为时，抽象类的子类用不同的行为类取初始化它，
 这样在调用相同的接口时就会根据传入行为类的不同实现不同的行为，从而实现多态

 “针对接口编程”,(真正的意思是针对超类型编程（更明确的说变量的声明类型应该是超类型，通常是一个抽象类或者是一个接口）)


